// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MarkdownRenderer is rendered correctly to match the snapshot 1`] = `
.emotion-0 h1,
.emotion-0 h2 {
  padding-bottom: 0.3em;
  margin-top: 2em;
  border-bottom: 1px solid hsla(0, 0%, 75%);
}

.emotion-0 h3,
.emotion-0 h4,
.emotion-0 h5,
.emotion-0 h6 {
  margin-top: 1em;
}

.emotion-0 code,
.emotion-0 pre {
  font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
  word-break: normal;
}

.emotion-0 pre {
  white-space: pre-wrap;
}

.emotion-0 code:not([class]) {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 0.85em;
  background-color: hsla(0, 0%, 92.5%);
  border-radius: 3px;
}

.emotion-0 blockquote,
.emotion-0 details,
.emotion-0 dl,
.emotion-0 ol,
.emotion-0 p,
.emotion-0 pre,
.emotion-0 table,
.emotion-0 ul {
  margin-top: 0;
  margin-bottom: 1.8rem;
}

.emotion-0 ol ol,
.emotion-0 ul ol {
  list-style-type: lower-roman;
}

.emotion-0 li>p {
  margin-top: 1.6rem;
}

.emotion-0 li+li {
  margin-top: 0.25em;
}

.emotion-0 blockquote {
  padding: 0 1em;
  margin-left: 0;
  color: hsla(0, 0%, 40%);
  border-left: 0.25em solid hsla(212, 72%, 90%);
}

.emotion-0 blockquote:first-of-type {
  margin-top: 0;
}

.emotion-0 blockquote:last-of-type {
  margin-bottom: 0;
}

.emotion-0 div.code-toolbar>.toolbar {
  top: 0.3em;
  right: 0.3em;
  -webkit-transition: none;
  transition: none;
}

.emotion-0 div.code-toolbar>.toolbar span {
  font-size: 0.85em;
  border-radius: 10px;
}

<ThemeProvider
  theme={
    Object {
      "color": Object {
        "blue": Object {
          "base": "hsla(212, 72%, 60%)",
          "dark": "hsla(212, 72%, 50%)",
          "dark2": "hsla(212, 72%, 40%)",
          "dark3": "hsla(212, 72%, 30%)",
          "dark4": "hsla(212, 72%, 20%)",
          "light": "hsla(212, 72%, 70%)",
          "light2": "hsla(212, 72%, 80%)",
          "light3": "hsla(212, 72%, 90%)",
        },
        "border": Object {
          "primary": "hsla(0, 0%, 50%)",
          "primaryLight": "hsla(0, 0%, 75%)",
        },
        "green": Object {
          "base": "hsla(148, 72%, 60%)",
          "dark": "hsla(148, 72%, 50%)",
          "dark2": "hsla(148, 72%, 40%)",
          "dark3": "hsla(148, 72%, 30%)",
          "dark4": "hsla(148, 72%, 20%)",
          "light": "hsla(148, 72%, 70%)",
          "light2": "hsla(148, 72%, 80%)",
          "light3": "hsla(148, 72%, 90%)",
        },
        "primary": "hsla(212, 72%, 60%)",
        "primaryDark": "hsla(212, 72%, 50%)",
        "primaryLight": "hsla(212, 72%, 70%)",
        "text": Object {
          "accent": "hsla(148, 72%, 50%)",
          "primary": "hsla(0, 0%, 15%)",
          "primaryLight": "hsla(0, 0%, 40%)",
          "secondary": "hsla(212, 72%, 40%)",
        },
        "yellow": Object {
          "base": "hsla(60, 72%, 60%)",
          "dark": "hsla(60, 72%, 50%)",
          "dark2": "hsla(60, 72%, 40%)",
          "dark3": "hsla(60, 72%, 30%)",
          "dark4": "hsla(60, 72%, 20%)",
          "light": "hsla(60, 72%, 70%)",
          "light2": "hsla(60, 72%, 80%)",
          "light3": "hsla(60, 72%, 90%)",
        },
      },
    }
  }
>
  <MarkdownRenderer
    content="test"
  >
    <ConvertedMdBody>
      <div
        className="emotion-0 emotion-1"
      >
        <ReactMarkdown
          plugins={
            Array [
              [Function],
              [Function],
            ]
          }
          renderers={
            Object {
              "footnoteDefinition": [Function],
              "footnoteReference": [Function],
            }
          }
          source="test"
          transformImageUri={[Function]}
          transformLinkUri={[Function]}
        >
          <Root
            key="root-1-1-0"
            node={
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "position": Object {
                          "end": Object {
                            "column": 5,
                            "line": 1,
                            "offset": 4,
                          },
                          "start": Object {
                            "column": 1,
                            "line": 1,
                            "offset": 0,
                          },
                        },
                        "type": "text",
                        "value": "test",
                      },
                    ],
                    "position": Object {
                      "end": Object {
                        "column": 5,
                        "line": 1,
                        "offset": 4,
                      },
                      "start": Object {
                        "column": 1,
                        "line": 1,
                        "offset": 0,
                      },
                    },
                    "type": "paragraph",
                  },
                ],
                "position": Object {
                  "end": Object {
                    "column": 5,
                    "line": 1,
                    "offset": 4,
                  },
                  "start": Object {
                    "column": 1,
                    "line": 1,
                    "offset": 0,
                  },
                },
                "type": "root",
              }
            }
          >
            <p
              key="paragraph-1-1-0"
            >
              <TextRenderer
                key="text-1-1-0"
                node={
                  Object {
                    "position": Object {
                      "end": Object {
                        "column": 5,
                        "line": 1,
                        "offset": 4,
                      },
                      "start": Object {
                        "column": 1,
                        "line": 1,
                        "offset": 0,
                      },
                    },
                    "type": "text",
                    "value": "test",
                  }
                }
                nodeKey="text-1-1-0"
                value="test"
              >
                test
              </TextRenderer>
            </p>
          </Root>
        </ReactMarkdown>
      </div>
    </ConvertedMdBody>
  </MarkdownRenderer>
</ThemeProvider>
`;
